% This function creates a .dat file that as it is used by MUSCOD.  The
% entire problem information is stored in the variable datStruct.  This
% struct can, for example, be generated with the function 'CreateDatStruct'
function CreateDatFile(FileName, datStruct)
    fid = fopen([FileName,'.dat'],'w');
    
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * DAT FILE AUTO GENERATED WITH MATLAB         *\n');
    fprintf(fid,' * CreateDatFile.m v0.1 cdremy@umich.edu       *\n');
    fprintf(fid,' ***********************************************/\n');
    for i = 1:length(datStruct.header)
        fprintf(fid,'%s\n',datStruct.header{i});
    end
    fprintf(fid,'\n');
        
    fprintf(fid,'// Used Library:\nlibmodel\n%s\n\n',datStruct.libmodel);
    
    fprintf(fid,'// Used Integrators:\nlibind\n');
    for i = 1:length(datStruct.libind)
        fprintf(fid,'%2i: %s\n',i-1,datStruct.libind{i});
    end
    fprintf(fid,'\n');
    
    
    
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * PHASE DEFINITIONS                           *\n');
    fprintf(fid,' ***********************************************/\n');
    
    fprintf(fid,'// Interval names:\nh_name\n');
    for i = 1:length(datStruct.h_name)
        fprintf(fid,'%2i: %s\n',i-1,datStruct.h_name{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'//  # of multiple shooting intervals on model stages nshoot:\nnshoot\n');
    for i = 1:length(datStruct.nshoot)
        fprintf(fid,'%2i: %2i // %s\n',i-1,datStruct.nshoot(i),datStruct.h_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Model stage duration start values:\nh\n');
    for i = 1:length(datStruct.h)
        fprintf(fid,'%2i: % f // %s\n',i-1,datStruct.h(i),datStruct.h_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Model stage duration scale factors:\nh_sca\n');
    for i = 1:length(datStruct.h_sca)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.h_sca(i),datStruct.h_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Model stage duration lower bound:\nh_min\n');
    for i = 1:length(datStruct.h_min)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.h_min(i),datStruct.h_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Model stage duration upper bound:\nh_max\n');
    for i = 1:length(datStruct.h_max)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.h_max(i),datStruct.h_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Model stage duration fixed value flags:\nh_fix\n');
    for i = 1:length(datStruct.h_fix)
        fprintf(fid,'%2i: %i // %s\n',i-1,datStruct.h_fix(i),datStruct.h_comment{i});
    end
    fprintf(fid,'\n');
    
    
    
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * STATE DEFINITIONS                           *\n');
    fprintf(fid,' ***********************************************/\n');
    
    fprintf(fid,'// State names:\nxd_name\n');
    for i = 1:length(datStruct.xd_name)
        fprintf(fid,'%2i: %s\n',i-1,datStruct.xd_name{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Specification mode for state variable start values:\ns_spec\n');
    switch size(datStruct.sd,2)
        case 1
            fprintf(fid,'2 // Start values given, all others generated by integration\n\n');
            fprintf(fid,'// States at the beginning of model stage 0:\nsd(0,S)\n');
            for i = 1:size(datStruct.sd,1)
                fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.sd(i,1),datStruct.xd_comment{i});
            end
            fprintf(fid,'\n');
        case 2
            fprintf(fid,'1 // Linear interpolation\n\n');
            fprintf(fid,'// States at the beginning of model stage 0:\nsd(0,S)\n');
            for i = 1:size(datStruct.sd,1)
                fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.sd(i,1),datStruct.xd_comment{i});
            end
            fprintf(fid,'\n');
            fprintf(fid,'// States at the end of model stage %i:\nsd(%i,E)\n',length(datStruct.libind)-1,length(datStruct.libind)-1);
            for i = 1:size(datStruct.sd,1)
                fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.sd(i,2),datStruct.xd_comment{i});
            end
            fprintf(fid,'\n');
        otherwise
            fprintf(fid,'0 // All values sd(*,*), sa(*,*) specified in data file\n\n');
            c = 1;
            for k = 1:length(datStruct.libind)
                for j = 1:datStruct.nshoot(k)
                    fprintf(fid,'// States at stage %i point %i:\nsd(%i,%i)\n',k,j,k-1,j-1);
                    for i = 1:size(datStruct.sd,1)
                        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.sd(i,c),datStruct.xd_comment{i});
                    end
                    fprintf(fid,'\n');
                    c = c + 1;
                end
            end
            fprintf(fid,'// States at the end of model stage %i:\nsd(%i,E)\n',k,k-1);
            for i = 1:size(datStruct.sd,1)
                fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.sd(i,c),datStruct.xd_comment{i});
            end
            fprintf(fid,'\n');
    end
    
    fprintf(fid,'// Scaling for all model stages:\nsd_sca(*,*)\n');
    for i = 1:size(datStruct.sd_sca,1)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.sd_sca(i),datStruct.xd_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Minimal values for all model stages:\nsd_min(*,*)\n');
    for i = 1:size(datStruct.sd_min,1)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.sd_min(i),datStruct.xd_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Maximal values for all model stages:\nsd_max(*,*)\n');
    for i = 1:size(datStruct.sd_max,1)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.sd_max(i),datStruct.xd_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Fix some states to their initial values:\nsd_fix(0,S)\n');
    for i = 1:size(datStruct.sd_fix_init,1)
        fprintf(fid,'%2i: %i // %s\n',i-1,datStruct.sd_fix_init(i),datStruct.xd_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Fix some states throughout integration:\nsd_fix(*,*)\n');
    for i = 1:size(datStruct.sd_fix,1)
        fprintf(fid,'%2i: %i // %s\n',i-1,datStruct.sd_fix(i),datStruct.xd_comment{i});
    end
    fprintf(fid,'\n');
    
    
       
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * ADJUSTABLE PARAMETER DEFINITIONS            *\n');
    fprintf(fid,' ***********************************************/\n');
    
    fprintf(fid,'// Parameter names:\np_name\n');
    for i = 1:length(datStruct.p_name)
        fprintf(fid,'%2i: %s\n',i-1,datStruct.p_name{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Inital values for all global parameters:\np\n');
    for i = 1:length(datStruct.p)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.p(i),datStruct.p_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Parameter scale factors:\np_sca\n');
    for i = 1:length(datStruct.p_sca)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.p_sca(i),datStruct.p_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Parameter minimal values:\np_min\n');
    for i = 1:length(datStruct.p_min)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.p_min(i),datStruct.p_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Parameter maximal values:\np_max\n');
    for i = 1:length(datStruct.p_max)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.p_max(i),datStruct.p_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Parameter fixed values:\np_fix\n');
    for i = 1:length(datStruct.p_fix)
        fprintf(fid,'%2i: %i // %s\n',i-1,datStruct.p_fix(i),datStruct.p_comment{i});
    end
    fprintf(fid,'\n');
    
    
    
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * CONTROL DEFINITIONS                         *\n');
    fprintf(fid,' ***********************************************/\n');
    
    fprintf(fid,'// Control names:\nu_name\n');
    for i = 1:length(datStruct.u_name)
        fprintf(fid,'%2i: %s\n',i-1,datStruct.u_name{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Control parameterization type:\nu_type(*)\n');
     for i = 1:length(datStruct.u_type)
        fprintf(fid,'%2i: %i // %s\n',i-1,datStruct.u_type(i),datStruct.u_comment{i});
    end
    fprintf(fid,'\n');
    
    if size(datStruct.u,2) == 1
        fprintf(fid,'// Control start values for all points:\nu(*,*)\n');
        for i = 1:size(datStruct.u,1)
            fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.u(i,1),datStruct.u_comment{i});
        end
        fprintf(fid,'\n');
    else
        c = 1;
        for k = 1:length(datStruct.libind)
            for j = 1:datStruct.nshoot(k)
                fprintf(fid,'// Control start values at stage %i point %i:\nu(%i,%i)\n',k,j,k-1,j-1);
                for i = 1:size(datStruct.u,1)
                    fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.u(i,c),datStruct.u_comment{i});
                end
                fprintf(fid,'\n');
                c = c + 1;
            end
        end
        fprintf(fid,'// Control start values at the end of model stage %i:\nu(%i,E)\n',k,k-1);
        for i = 1:size(datStruct.u,1)
            fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.u(i,c),datStruct.u_comment{i});
        end
        fprintf(fid,'\n');
    end
    
    fprintf(fid,'// Control scale factors:\nu_sca(*,*)\n');
    for i = 1:length(datStruct.u_sca)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.u_sca(i),datStruct.u_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Control minimal values:\nu_min(*,*)\n');
    for i = 1:length(datStruct.u_min)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.u_min(i),datStruct.u_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Control maximal values:\nu_max(*,*)\n');
    for i = 1:length(datStruct.u_max)
        fprintf(fid,'%2i: %11.7f // %s\n',i-1,datStruct.u_max(i),datStruct.u_comment{i});
    end
    fprintf(fid,'\n');
    
    fprintf(fid,'// Excitation state fixed values:\nu_fix(*,*)\n');
    for i = 1:length(datStruct.u_fix)
        fprintf(fid,'%2i: %i // %s\n',i-1,datStruct.u_fix(i),datStruct.u_comment{i});
    end
    fprintf(fid,'\n');
    
    
    
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * CONSTRAINT DEFINITIONS                      *\n');
    fprintf(fid,' ***********************************************/\n');
    
    fprintf(fid,'// Decoupled i.p.c. scale factors:\nrd_sca(0,S)\nALL: %11.7f\n\n',datStruct.rd_scaStart);
    fprintf(fid,'rd_sca(%i,E)\nALL: %11.7f\n\n',length(datStruct.h),datStruct.rd_scaEnd);
    fprintf(fid,'rc_sca\nALL: %11.7f\n\n',datStruct.rc_sca);
    
    
    
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * OBJECTIVE FUNCTION DEFINITIONS              *\n');
    fprintf(fid,' ***********************************************/\n');
    
    fprintf(fid,'// Objective function name:\nof_name\n%s\n\n',datStruct.of_name);
    fprintf(fid,'// Objective function scale:\nof_sca\n%11.7f\n\n',datStruct.of_sca);
    fprintf(fid,'// Objective function expected lower bound:\nof_min\n%11.7f\n\n',datStruct.of_min);
    fprintf(fid,'// Objective function expected upper bound:\nof_max\n%11.7f\n\n',datStruct.of_max);
    fprintf(fid,'// # of values in history plot:\nnhist\n%i\n\n',datStruct.nhist);
    
    
    
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * CHOOSING LIBRARIES                          *\n');
    fprintf(fid,' ***********************************************/\n');
    
    fprintf(fid,'libhessian\n%s\n\n',datStruct.libhessian);
    fprintf(fid,'libsolve\n%s\n\n',datStruct.libsolve);
    fprintf(fid,'libcond\n%s\n\n',datStruct.libcond);
    fprintf(fid,'libtchk\n%s\n\n',datStruct.libtchk);
    fprintf(fid,'libmssqp\n%s\n\n',datStruct.libmssqp);
    fprintf(fid,'libeval\n%s\n\n',datStruct.libeval);
    fprintf(fid,'libqps\n%s\n\n',datStruct.libqps);
    fprintf(fid,'libplot\n%s\n\n',datStruct.libplot);
    

    
    fprintf(fid,'/***********************************************\n');
    fprintf(fid,' * SETTING ALGORITHMIC PARAMETER               *\n');
    fprintf(fid,' ***********************************************/\n');
    
    fprintf(fid,'options_acc\n%11.7f\n\n',datStruct.options_acc);
    fprintf(fid,'options_ftol\n%11.7f\n\n',datStruct.options_ftol);
    fprintf(fid,'options_itol\n%11.7f\n\n',datStruct.options_itol);
    fprintf(fid,'options_rfac\n%11.7f\n\n',datStruct.options_rfac);
    fprintf(fid,'options_levmar\n%11.7f\n\n',datStruct.options_levmar);
    fprintf(fid,'options_qp_featol\n%11.7f\n\n',datStruct.options_qp_featol);
    fprintf(fid,'options_qp_relax\n%11.7f\n\n',datStruct.options_qp_relax);
    fprintf(fid,'options_nhtopy\n%11.7f\n\n',datStruct.options_nhtopy);
    fprintf(fid,'options_frstart\n%11.7f\n\n',datStruct.options_frstart);
    fprintf(fid,'options_frmax\n%11.7f\n\n',datStruct.options_frmax);
    fprintf(fid,'options_itmax\n%11.7f\n\n',datStruct.options_itmax);
    fprintf(fid,'options_plevel_screen\n%11.7f\n\n',datStruct.options_plevel_screen);
    fprintf(fid,'options_plevel_file\n%11.7f\n\n',datStruct.options_plevel_file);
    fprintf(fid,'options_plevel_matlab\n%11.7f\n\n',datStruct.options_plevel_matlab);
    fprintf(fid,'options_bflag\n%11.7f\n\n',datStruct.options_bflag);
    fprintf(fid,'options_qp_itmax\n%11.7f\n\n',datStruct.options_qp_itmax);
    fprintf(fid,'options_qp_expand\n%11.7f\n\n',datStruct.options_qp_expand);
    fprintf(fid,'options_sflag\n%11.7f\n\n',datStruct.options_sflag);
    fprintf(fid,'options_options_wflag\n%11.7f\n\n',datStruct.options_options_wflag);
    fprintf(fid,'options_cflag\n%11.7f\n\n',datStruct.options_cflag);
    fprintf(fid,'options_output_ps\n%11.7f\n\n',datStruct.options_output_ps);
    fprintf(fid,'options_output_gif\n%11.7f\n\n',datStruct.options_output_gif);
    
    fclose(fid);
end