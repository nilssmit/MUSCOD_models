% Creates a data struct, as it is used in the function CreateDatFile. Each
% data struct create by this function is guranteed to converge to a
% solution in MUSCOD.
% In the basic version, values are chosen to replicate the results of my
% dissertation/ the ICRA paper on costfunctions.
%
% legJointType is either
%   'PEA' or 'SEA'
%
% Possible uses:
% CreateDatFile('Data/HOPPING_1D_PL_BASE',CreateDatStructMonoped1D('PEA'))
% CreateDatFile('Data/HOPPING_1D_SL_BASE',CreateDatStructMonoped1D('SEA'))
function datStruct = CreateDatStructRAMoneWalk(costFunction)
    % First, define all properties that only depend on the gait type:
    % (do we need to initialize in a feasible configuration?)
    sd = zeros(25,1);
    sd(1) = 1;      % x
    sd(2) = 0.2;    % dx
    sd(3) = 1;      % y
    sd(4) = 0;      % dy
    sd(5) = 0;      % phi
    sd(6) = 0;      % dphi
    sd(7) = 0;      % alphaL
    sd(8) = 0;      % dalphaL
    sd(9) = 0;      % ualphaL
    sd(10)= 0;      % dualphaL
    sd(11)= 0;      % alphaR
    sd(12)= 0;      % dalphaR
    sd(13)= 0;      % ualphaR
    sd(14)= 0;      % dualphaR
    sd(15)= 0;      % betaL
    sd(16)= 0;      % dbetaL
    sd(17)= 0;      % ubetaL
    sd(18)= 0;      % dubetaL
    sd(19)= 0;      % betaR
    sd(20)= 0;      % dbetaR
    sd(21)= 0;      % ubetaR
    sd(22)= 0;      % dubetaR
    sd(23)= 0;      % posActWork
    sd(24)= 0;      % posElWork
    sd(25)= 0;      % totElLoss
    
    p(1)  = 0;      % Hip is SEA (hip_jnt_type)
    p(2)  = 0;      % Knee is SEA (leg_jnt_type)
    p(3)  = 9.81;   % g [m/s^2]
    p(4)  = 6.54;   % Mass of the main body (m1) [kg]
    p(5)  = 1.56;   % Mass of the thigh (m2) [kg]
    p(6)  = 0.42;   % Mass of the shank (m3) [kg]
    p(7)  = 0.1377; % Distance from MB COG to hip (lH) [m]
    p(8)  = 0.2;    % Distance from hip to knee (lL1) [m]
    p(9)  = 0.2385; % Distance from knee to foot center (lL2) [m]
    p(10) = 0.016;  % Distance from hip to thigh COG (l2) [m]
    p(11) = 0.1585; % Distance from knee to shank COG (l3) [m]
    p(12) = 0.0282; % Radius of the foot ball (rFoot) [m]
    p(13) = 0.04;   % Rotational inertia of main body (j1_) [kg*m^2]
    p(14) = 0.0085; % Rotational inertia of thigh (j2) [kg*m^2] 
    p(15) = 0.0035; % Rotational inertia of shank (j3) [kg*m^2]
    p(16) = 70;     % Spring constant of hip spring (kalpha) [N*m/rad]
    p(17) = 7;      % Damping constant of hip spring (balpha) [N*m/(rad/s)]
    p(18) = 80;     % Spring constant of knee spring at small angles (kbeta1) [N*m/rad]
    p(19) = 36;     % Spring constant of knee spring at large angles (kbeta2) [N*m/rad]
    p(20) = 10;     % Damping constant of knee at spring at small angles (bbeta1) [N*m/(rad/s)]
    p(21) = 0;      % Damping constant of knee at spring at large angles (bbeta2) [N*m/(rad/s)]
    p(22) = 0;      % Threshold between large and small knee angles (betaSmall) [rad]
    p(23) = 0;      % Max power of hip motor (P_max_alpha) [W]
    p(24) = 0;      % Max speed of hip motor (du_max_alpha) [rad/s]
    p(25) = 0;      % Heat limit ratio of hip motor (c_lim_alpha) [*]
    p(26) = 0;      % Inertia of hip motor (j_mot_alpha) [kg*m^2]
    p(27) = 0;      % Max power of knee motor (P_max_beta) [W]
    p(28) = 0;      % Max speed of knee motor (du_max_beta) [rad/s]
    p(29) = 0;      % Heat limit ratio of knee motor (c_lim_beta) [*]
    p(30) = 0;      % Inertia of knee motor (j_mot_beta) [kg*m^2]
    p(31) = 0;      % Cost function selection index (cost_fct_sel) [0; 1; 2]
    p(32) = 0;      % Average speed (v_avg) [m/s]
    p(33) = 0;      % Knee spring regularization constant (sigma) [rad]
    p(34) = 0;      % Constraint selection index (const_sel) [binary flags]
    
    switch lower(costFunction)
        case 'posactwork'
            p(31) = 0;
        case 'poselwork'
            p(31) = 1;
        case 'totelloss'
            p(31) = 2;
    end
    
    u  = zeros(4,1);
    h  = [1;0;1];  
    nshoot = [100;1;100];
    
    typeString = 'Walking';
    datStruct.libmodel = 'libAB_Walking';
    datStruct.libind = {'ind_rkf45'; 'ind_strans'; 'ind_rkf45'};
    datStruct.h_name = {'single stance right'; 'touchdown'; 'double stance'};
    datStruct.h_comment = {'Single stance until touchdown'; 'Touchdown'; 'Double stance until liftoff'};
    datStruct.nshoot = nshoot;
    datStruct.h      = h;
    datStruct.h_sca  = [1.0;0;1.0];
    datStruct.h_min  = [0.0001;0.0;0.0001];
    datStruct.h_max  = [5.0;0.0;5.0];
    datStruct.h_fix  = [0;1;0];
    
    % Parameterized properties:
    datStruct.header = {'/***********************************************';
                          '*';
                          ['*  Gait optimization for an articulating biped in a ',typeString];
                          '*  gait with series elastic legs';
                          '*';
                          '*';
                          ['*    0: ',num2str(p(1), '% 8.5f'),'  // hip_jnt_type  [0; 1]             Actuator selection hip (0 = series elastic; 1 = parallel elastic)'];
                          ['*    1: ',num2str(p(2), '% 8.5f'),'  // knee_jnt_type [0; 1]             Actuator selection knee (0 = series elastic; 1 = parallel elastic)'];
                          ['*    2: ',num2str(p(3), '% 8.5f'),'  // g             [m/s^2]            Gravitational constant'];
                          ['*    3: ',num2str(p(4), '% 8.5f'),'  // m1            [kg]               Mass of the main body'];
                          ['*    4: ',num2str(p(5), '% 8.5f'),'  // m2            [kg]               Mass of the thigh'];
                          ['*    5: ',num2str(p(6), '% 8.5f'),'  // m3            [kg]               Mass of the shank'];
                          ['*    6: ',num2str(p(7), '% 8.5f'),'  // lH            [m]                Distance from MB COG to hip'];
                          ['*    7: ',num2str(p(8), '% 8.5f'),'  // lL1           [m]                Distance from hip to knee'];
                          ['*    8: ',num2str(p(9), '% 8.5f'),'  // lL2           [m]                Distance from knee to foot center'];
                          ['*    9: ',num2str(p(10),'% 8.5f'),'  // l2            [m]                Distance from hip to thigh COG'];
                          ['*   10: ',num2str(p(11),'% 8.5f'),'  // l3            [m]                Distance from knee to shank COG'];
                          ['*   11: ',num2str(p(12),'% 8.5f'),'  // rFoot         [m]                Radius of the foot ball'];
                          ['*   12: ',num2str(p(13),'% 8.5f'),'  // j1_           [kg*m^2]           Rotational inertia of main body'];
                          ['*   13: ',num2str(p(14),'% 8.5f'),'  // j2            [kg*m^2]           Rotational inertia of thigh'];
                          ['*   14: ',num2str(p(15),'% 8.5f'),'  // j3            [kg*m^2]           Rotational inertia of shank'];
                          ['*   15: ',num2str(p(16),'% 8.5f'),'  // kalpha        [N*m/rad]          Spring constant of hip spring'];
                          ['*   16: ',num2str(p(17),'% 8.5f'),'  // balpha        [N*m/(rad/s)]      Damping constant of hip spring'];
                          ['*   17: ',num2str(p(18),'% 8.5f'),'  // kbeta1        [N*m/rad]          Spring constant of knee spring at small angles'];
                          ['*   18: ',num2str(p(19),'% 8.5f'),'  // kbeta2        [N*m/rad]          Spring constant of knee spring at large angles'];
                          ['*   19: ',num2str(p(20),'% 8.5f'),'  // bbeta1        [N*m/(rad/s)]      Damping constant of knee at spring at small angles'];
                          ['*   20: ',num2str(p(21),'% 8.5f'),'  // bbeta2        [N*m/(rad/s)]      Damping constant of knee at spring at large angles'];
                          ['*   21: ',num2str(p(22),'% 8.5f'),'  // betaSmall     [rad]              Threshold between large and small knee angles'];
                          ['*   22: ',num2str(p(23),'% 8.5f'),'  // P_max_alpha   [W]                Max power of hip motor'];
                          ['*   23: ',num2str(p(24),'% 8.5f'),'  // du_max_alpha  [rad/s]            Max speed of hip motor'];
                          ['*   24: ',num2str(p(25),'% 8.5f'),'  // c_lim_alpha	  [*]                Heat limit ratio of hip motor'];
                          ['*   25: ',num2str(p(26),'% 8.5f'),'  // j_mot_alpha   [kg*m^2]           Inertia of hip motor'];
                          ['*   26: ',num2str(p(27),'% 8.5f'),'  // P_max_beta    [W]                Max power of knee motor'];
                          ['*   27: ',num2str(p(28),'% 8.5f'),'  // du_max_beta   [rad/s]            Max speed of knee motor'];
                          ['*   28: ',num2str(p(29),'% 8.5f'),'  // c_lim_beta    [*]                Heat limit ratio of knee motor'];
                          ['*   29: ',num2str(p(30),'% 8.5f'),'  // j_mot_beta    [kg*m^2]           Inertia of knee motor'];
                          ['*   30: ',num2str(p(31),'% 8.5f'),'  // cost_fct_sel  [1; 2; 3]       Cost function selector (1 = posActWorkCOT; 2 = posElWorkCOT; 3 = totElLossCOT)'];
                          ['*   31: ',num2str(p(32),'% 8.5f'),'  // v_avg         [m/s]              Enforced average speed'];
                          ['*   32: ',num2str(p(33),'% 8.5f'),'  // sigma         [rad]              Knee spring regularization constant'];
                          ['*   33: ',num2str(p(34),'% 8.5f'),'  // const_sel     [binary flags]     1: GroundClearance 2: TorqueLimits 4: SpeedLimits'];
                          '*';
                          '***********************************************/'};

    %% States:
    datStruct.xd_name = {'x'; 'dx'; 'y'; 'dy'; 'phi'; 'dphi'; 
                         'alphaL'; 'dalphaL'; 'ualphaL'; 'dualphaL'; 
                         'alphaR'; 'dalphaR'; 'ualphaR'; 'dualphaR'; 
                         'betaL'; 'dbetaL'; 'ubetaL'; 'dubetaL';
                         'betaR'; 'dbetaR'; 'ubetaR'; 'dubetaR';
                         'Act Work'; 'El Work'; 'El Loss'};
    datStruct.xd_comment = { 'x          [m]         Main body x position'; 
                             'dx         [m/s]       Main body x velocity'; 
                             'y          [m]         Main body y position'; 
                             'dy         [m/s]       Main body y velocity'; 
                             'phi        [rad]       Main body pitch'; 
                             'dphi       [rad/s]     Main body pitch velocity';
                             'alphaL     [rad]       Left hip angle';
                             'dalphaL    [rad/s]     Left hip angular velocity';
                             'ualphaL    [rad]       Left hip actuator angle';
                             'dualphaL   [rad/s]     Left hip actuator angular velocity';
                             'alphaR     [rad]       Right hip angle';
                             'dalphaR    [rad/s]     Right hip angular velocity';
                             'ualphaR    [rad]       Right hip actuator angle';
                             'dualphaR   [rad/s]     Right hip actuator angular velocity';
                             'betaL      [rad]       Left knee angle';
                             'dbetaL     [rad/s]     Left knee angular velocity';
                             'ubetaL     [rad]       Left knee actuator angle';
                             'dubetaL    [rad/s]     Left knee actuator angular velocity';
                             'betaR      [rad]       Right knee angle';
                             'dbetaR     [rad/s]     Right knee angular velocity';
                             'ubetaR     [rad]       Right knee actuator angle';
                             'dubetaR    [rad/s]     Right knee actuator angular velocity';
                             'posActWork [J]         Positive actuator work (must initially remain 0)'; 
                             'posElWork  [J]         Positive electrical work (must initially remain 0)'; 
                             'totElLoss  [J]         Total electrical losses (must initially remain 0)'};
                         
    datStruct.sd          = sd;
    datStruct.sd_sca      = ones(25,1);
    
    % States are unlimited apart from the body height (which is bounded by [0,10])
    % knee joints (which are bounded by [-3*pi/4, -0.05]), knee actuators 
    % ([-3*pi/4, pi/4]), and hip joints ([-pi/2, pi/2])
    datStruct.sd_min          = -100*ones(25,1);
    datStruct.sd_min(3)       = 0;
    datStruct.sd_min([7,11])  = -pi/2;
    datStruct.sd_min(15:2:21) = -3*pi/4;
    
    datStruct.sd_max          = 100*ones(25,1);
    datStruct.sd_max(3)       = 10;
    datStruct.sd_max([7,11])  = pi/2;
    datStruct.sd_max([15,19]) = -0.05;
    datStruct.sd_max([17,21]) = pi/4;
    
    % Some states fixed at the start of the simulation:
    datStruct.sd_fix_init = zeros(25,1);
    datStruct.sd_fix_init(1) = 1; % Fix initial x position
    datStruct.sd_fix_init(23:end) = 1; % Fix work terms
    
    % Everything can change thereafter:
    datStruct.sd_fix      = zeros(25,1);
    
    %% Parameters:
    datStruct.p_name = {'hip_jnt_type';
                        'knee_jnt_type';
                        'g';
                        'm1';
                        'm2';
                        'm3';
                        'lH';
                        'lL1';
                        'lL2';
                        'l2';
                        'l3';
                        'rFoot';
                        'j1_';
                        'j2';
                        'j3';
                        'kalpha';
                        'balpha';
                        'kbeta1';
                        'kbeta2';
                        'bbeta1';
                        'bbeta2';
                        'betaSmall';
                        'P_max_alpha';
                        'du_max_alpha';
                        'c_lim_alpha';
                        'j_mot_alpha';
                        'P_max_beta';
                        'du_max_beta';
                        'c_lim_beta';
                        'j_mot_beta';
                        'cost_fct_sel';
                        'v_avg';
                        'sigma';
                        'const_sel'};
        
    datStruct.p_comment = { 'hip_jnt_type  [0; 1]             Actuator selection hip (0 = series elastic; 1 = parallel elastic)';
                            'knee_jnt_type [0; 1]             Actuator selection knee (0 = series elastic; 1 = parallel elastic)';
                            'g             [m/s^2]            Gravitational constant';
                            'm1            [kg]               Mass of the main body';
                            'm2            [kg]               Mass of the thigh';
                            'm3            [kg]               Mass of the shank';
                            'lH            [m]                Distance from MB COG to hip';
                            'lL1           [m]                Distance from hip to knee';
                            'lL2           [m]                Distance from knee to foot center';
                            'l2            [m]                Distance from hip to thigh COG';
                            'l3            [m]                Distance from knee to shank COG';
                            'rFoot         [m]                Radius of the foot ball';
                            'j1_           [kg*m^2]           Rotational inertia of main body';
                            'j2            [kg*m^2]           Rotational inertia of thigh';
                            'j3            [kg*m^2]           Rotational inertia of shank';
                            'kalpha        [N*m/rad]          Spring constant of hip spring';
                            'balpha        [N*m/(rad/s)]      Damping constant of hip spring';
                            'kbeta1        [N*m/rad]          Spring constant of knee spring at small angles';
                            'kbeta2        [N*m/rad]          Spring constant of knee spring at large angles';
                            'bbeta1        [N*m/(rad/s)]      Damping constant of knee at spring at small angles';
                            'bbeta2        [N*m/(rad/s)]      Damping constant of knee at spring at large angles';
                            'betaSmall     [rad]              Threshold between large and small knee angles';
                            'P_max_alpha   [W]                Max power of hip motor';
                            'du_max_alpha  [rad/s]            Max speed of hip motor';
                            'c_lim_alpha   [*]                Heat limit ratio of hip motor';
                            'j_mot_alpha   [kg*m^2]           Inertia of hip motor';
                            'P_max_beta    [W]                Max power of knee motor';
                            'du_max_beta   [rad/s]            Max speed of knee motor';
                            'c_lim_beta    [*]                Heat limit ratio of knee motor';
                            'j_mot_beta    [kg*m^2]           Inertia of knee motor';
                            'cost_fct_sel  [0; 1; 2; 3]       Cost function selector (1 = posActWorkCOT; 2 = posElWorkCOT; 3 = totElLossCOT)';
                            'v_avg         [m/s]              Enforced average speed';
                            'sigma         [rad]              Knee spring regularization constant';
                            'const_sel     [binary flags]     1: GroundClearance 2: TorqueLimits 4: SpeedLimits'};
    datStruct.p      = p;
    datStruct.p_sca  = ones(34,1);  %scale factor
    datStruct.p_min  = -100*ones(34,1);
    datStruct.p_max  = 100*ones(34,1);
    % All Parameters are fixed
    datStruct.p_fix  = ones(34,1);

    %% Actuation
    datStruct.u_name = {'TalphaL'; 'TalphaR'; 'TbetaL'; 'TbetaR'};
    datStruct.u_comment = {'TalphaL     [N*m]   Left hip motor torque';
                           'TalphaR     [N*m]   Right hip motor torque';
                           'TbetaL      [N*m]   Left knee motor torque';
                           'TbetaR      [N*m]   Right knee motor torque'};
    datStruct.u_type = 2; % piecewise linear
    datStruct.u      = u;
    datStruct.u_sca  = ones(4,1);
    
    % This limit should never go into effect, since the actuators are
    % limited within the dynamic functions. Yet, it helps stabilize the
    % optimization
    datStruct.u_min  = -20.0*ones(4,1);
    datStruct.u_max  = -datStruct.u_min;
    datStruct.u_fix  = zeros(4,1);

    %% Misc entries
    datStruct.rd_scaStart = 1.0;
    datStruct.rd_scaEnd   = 1.0;
    datStruct.rc_sca      = 1.0;

    datStruct.of_name = 'Energy';
    datStruct.of_sca  = 0.5;
    datStruct.of_min  = 0.0;
    datStruct.of_max  = 1.0;
    datStruct.nhist   = 100;

    datStruct.libhessian = 'hess_update';
    datStruct.libsolve   = 'solve_slse';
    datStruct.libcond    = 'cond_std';
    datStruct.libtchk    = 'tchk';
    datStruct.libmssqp   = 'mssqp_standard';
    datStruct.libeval    = 'eval_ind';
    datStruct.libqps     = 'qps_qpopt';
    datStruct.libplot    = 'plot_pgplot';

    datStruct.options_acc           = 1e-6;
    datStruct.options_ftol          = -1.0;
    datStruct.options_itol          = -1.0;
    datStruct.options_rfac          = 0.0;
    datStruct.options_levmar        = 0.0;
    datStruct.options_qp_featol     = 1.0e-8;
    datStruct.options_qp_relax      = 1.1;
    datStruct.options_nhtopy        = 0;
    datStruct.options_frstart       = 0;
    datStruct.options_frmax         = 0;
    datStruct.options_itmax         = 1000;
    datStruct.options_plevel_screen = 0;
    datStruct.options_plevel_file   = 1;
    datStruct.options_plevel_matlab = 0;
    datStruct.options_bflag         = -1;
    datStruct.options_qp_itmax      = 10000;
    datStruct.options_qp_expand     = 99999999;
    datStruct.options_sflag         = 0;
    datStruct.options_options_wflag = 0;
    datStruct.options_cflag         = 0;
    datStruct.options_output_ps     = 0;
    datStruct.options_output_gif    = 0;
end